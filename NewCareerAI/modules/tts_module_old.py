#!/usr/bin/env python3
"""
üîä tts_module_old.py - Legacy Text-to-Speech Module
===================================================
‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:
- Simple TTS implementation ‡∏î‡πâ‡∏ß‡∏¢ system commands
- macOS built-in TTS support (say command)
- Basic text-to-speech functionality
- Legacy compatibility layer

‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:
- TextToSpeech class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö basic TTS
- macOS "say" command integration
- Simple text output fallback
- Error handling ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö unsupported systems

Limitations:
- macOS only (say command)
- No voice customization
- Basic functionality only
- No audio file output

Status: DEPRECATED - ‡πÉ‡∏ä‡πâ TTSmodule.py ‡πÅ‡∏ó‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production
Purpose: Legacy compatibility ‡πÅ‡∏•‡∏∞ simple testing only
‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: from modules.tts_module_old import TextToSpeech
===================================================
"""

import subprocess

class TextToSpeech:
    def speak(self, text):
        try:
            subprocess.run(["say", text])  # macOS built-in TTS
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏π‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ: {e}")

    def speak_text(self, text):
        print(f"ü§ñ Luna: {text}")
        try:
            subprocess.run(["say", text])  # macOS built-in TTS
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏π‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ: {e}")
