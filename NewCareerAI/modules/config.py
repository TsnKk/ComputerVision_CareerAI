#!/usr/bin/env python3
"""
‚öôÔ∏è config.py - Configuration Management System
===============================================
‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:
- Centralized configuration management
- Environment variables handling (.env files)
- API keys and credentials management
- Audio recording and playback settings
- AI model configuration (Whisper, TTS, Gemini)
- File path and directory management

‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:
- APIConfig: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Gemini API ‡πÅ‡∏•‡∏∞ Google Cloud credentials
- AudioConfig: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
- TTSConfig: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏≠‡∏á TTS
- WhisperConfig: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• STT ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
- InterviewConfig: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå

‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å:
- APIConfig, AudioConfig, TTSConfig, WhisperConfig, InterviewConfig
- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô get_* ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó

‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: from modules.config import get_api_config
===============================================
"""
import os
import json
from pathlib import Path
from typing import Dict, List, Optional

# ‡πÇ‡∏´‡∏•‡∏î environment variables ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env
try:
    from dotenv import load_dotenv
    # ‡∏´‡∏≤ path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå .env
    env_path = Path(__file__).parent.parent / '.env'
    if env_path.exists():
        load_dotenv(env_path)
        print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å {env_path}")
    else:
        print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .env ‡∏ó‡∏µ‡πà {env_path}")
except ImportError:
    print("‚ö†Ô∏è  python-dotenv ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ system environment variables")

# === Project Paths ===
PROJECT_ROOT = Path(__file__).parent.parent
AUDIO_DIR = PROJECT_ROOT / "audio_files"
TEMP_DIR = PROJECT_ROOT / "temp"
DATA_DIR = PROJECT_ROOT / "data"

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
for dir_path in [AUDIO_DIR, TEMP_DIR, DATA_DIR]:
    dir_path.mkdir(exist_ok=True)

# === API Configuration ===
class APIConfig:
    """API ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
    
    @property
    def google_credentials_path(self) -> str:
        """Path ‡πÑ‡∏ü‡∏•‡πå Google Service Account"""
        env_path = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS")
        if env_path and os.path.exists(env_path):
            return env_path
        
        # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå
        local_files = [
            "careerai-469309-9946c52b3f8e.json",
            "service-account.json",
            "google-credentials.json"
        ]
        
        for file_name in local_files:
            file_path = PROJECT_ROOT / file_name
            if file_path.exists():
                return str(file_path)
        
        return "careerai-469309-9946c52b3f8e.json"
    
    @property
    def gemini_api_key(self) -> Optional[str]:
        """Gemini API Key"""
        return os.environ.get("GEMINI_API_KEY")
    
    @property
    def is_valid(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API Config ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        return (os.path.exists(self.google_credentials_path) and 
                self.gemini_api_key is not None)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á instance
api_config = APIConfig()

# ‡πÄ‡∏Å‡πá‡∏ö legacy variables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility
GOOGLE_CREDENTIALS_PATH = api_config.google_credentials_path
GEMINI_API_KEY = api_config.gemini_api_key

# === Enhanced Configuration Classes ===
class AudioConfig:
    """‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
    SAMPLE_RATE = 16000
    CHUNK_SIZE = 1024
    SILENCE_THRESHOLD = 500
    SILENCE_DURATION = 3  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    MIN_RECORDING_DURATION = 1  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    MAX_RECORDING_DURATION = 30  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    
    @classmethod
    def to_dict(cls) -> Dict:
        return {
            "sample_rate": cls.SAMPLE_RATE,
            "chunk_size": cls.CHUNK_SIZE,
            "silence_threshold": cls.SILENCE_THRESHOLD,
            "silence_duration": cls.SILENCE_DURATION,
            "min_recording_duration": cls.MIN_RECORDING_DURATION,
            "max_recording_duration": cls.MAX_RECORDING_DURATION,
        }

class TTSConfig:
    """‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Text-to-Speech"""
    LANGUAGE_CODE = "th-TH"
    VOICE_NAME = "th-TH-Wavenet-C"  # ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡πÑ‡∏ó‡∏¢
    AUDIO_ENCODING = "LINEAR16"
    SAMPLE_RATE = 16000
    SPEAKING_RATE = 1.0  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î
    PITCH = 0.0  # ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    VOLUME_GAIN_DB = 0.0  # ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    
    # ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    VOICE_OPTIONS = {
        "female": "th-TH-Wavenet-C",
        "male": "th-TH-Wavenet-B",
        "premium": "th-TH-Chirp3-HD-Erinome"
    }
    
    @classmethod
    def to_dict(cls) -> Dict:
        return {
            "language_code": cls.LANGUAGE_CODE,
            "voice_name": cls.VOICE_NAME,
            "audio_encoding": cls.AUDIO_ENCODING,
            "sample_rate": cls.SAMPLE_RATE,
            "speaking_rate": cls.SPEAKING_RATE,
            "pitch": cls.PITCH,
            "volume_gain_db": cls.VOLUME_GAIN_DB,
        }

class WhisperConfig:
    """‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Whisper STT"""
    MODEL_SIZE = "base"  # tiny, base, small, medium, large
    LANGUAGE = "th"
    TEMPERATURE = 0.0  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    
    MODEL_OPTIONS = {
        "tiny": "‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÅ‡∏ï‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ô‡πâ‡∏≠‡∏¢",
        "base": "‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥", 
        "small": "‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô",
        "medium": "‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≤‡∏ô",
        "large": "‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"
    }
    
    @classmethod
    def to_dict(cls) -> Dict:
        return {
            "model_size": cls.MODEL_SIZE,
            "language": cls.LANGUAGE,
            "temperature": cls.TEMPERATURE,
        }

class InterviewConfig:
    """‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå"""
    MAX_QUESTIONS = 10  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 5 ‡πÄ‡∏õ‡πá‡∏ô 10
    QUESTION_TIMEOUT = 60  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö
    GEMINI_MODEL = "gemini-2.0-flash"
    
    # ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå
    INTERVIEW_TYPES = {
        "technical": "‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ",
        "behavioral": "‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°", 
        "mixed": "‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡∏ú‡∏™‡∏°",
        "custom": "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
    }
    
    @classmethod
    def to_dict(cls) -> Dict:
        return {
            "max_questions": cls.MAX_QUESTIONS,
            "question_timeout": cls.QUESTION_TIMEOUT,
            "gemini_model": cls.GEMINI_MODEL,
            "interview_types": cls.INTERVIEW_TYPES,
        }

# ‡∏™‡∏£‡πâ‡∏≤‡∏á instances ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
audio_config = AudioConfig()
tts_config = TTSConfig()
whisper_config = WhisperConfig()
interview_config = InterviewConfig()

# Legacy dictionaries ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility
AUDIO_CONFIG = audio_config.to_dict()
TTS_CONFIG = tts_config.to_dict()
WHISPER_CONFIG = whisper_config.to_dict()
INTERVIEW_CONFIG = interview_config.to_dict()

# === Enhanced Validation and Utility Functions ===
def validate_config() -> List[str]:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
    errors = []
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google Credentials
    if not os.path.exists(api_config.google_credentials_path):
        errors.append(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Google Credentials: {api_config.google_credentials_path}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Gemini API Key
    if not api_config.gemini_api_key:
        errors.append("‡πÑ‡∏°‡πà‡∏û‡∏ö GEMINI_API_KEY environment variable")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    required_dirs = [AUDIO_DIR, DATA_DIR]
    for dir_path in required_dirs:
        if not dir_path.exists():
            try:
                dir_path.mkdir(exist_ok=True)
                print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {dir_path}")
            except Exception as e:
                errors.append(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {dir_path}: {e}")
    
    return errors

def print_config_status():
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
    print("=" * 50)
    print("üöÄ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö NewCareerAI")
    print("=" * 50)
    
    # API Settings
    print("üì° API Configuration:")
    print(f"   üîë Google Credentials: {api_config.google_credentials_path}")
    print(f"      {'‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå' if os.path.exists(api_config.google_credentials_path) else '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå'}")
    print(f"   ü§ñ Gemini API Key: {'‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß' if api_config.gemini_api_key else '‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤'}")
    
    # Audio Settings
    print("\nÔøΩ Audio Configuration:")
    print(f"   üé§ Sample Rate: {audio_config.SAMPLE_RATE:,} Hz")
    print(f"   ‚è±Ô∏è  Max Recording: {audio_config.MAX_RECORDING_DURATION} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    print(f"   üîá Silence Duration: {audio_config.SILENCE_DURATION} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    
    # TTS Settings
    print("\nüîä Text-to-Speech Configuration:")
    print(f"   üó£Ô∏è  Voice: {tts_config.VOICE_NAME}")
    print(f"   üåè Language: {tts_config.LANGUAGE_CODE}")
    print(f"   ‚ö° Speaking Rate: {tts_config.SPEAKING_RATE}")
    
    # Whisper Settings
    print("\nüß† Whisper STT Configuration:")
    print(f"   üìä Model Size: {whisper_config.MODEL_SIZE}")
    print(f"   üí¨ Language: {whisper_config.LANGUAGE}")
    
    # Interview Settings
    print("\n‚ùì Interview Configuration:")
    print(f"   üìù Max Questions: {interview_config.MAX_QUESTIONS}")
    print(f"   ‚è∞ Question Timeout: {interview_config.QUESTION_TIMEOUT} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    print(f"   ü§ñ AI Model: {interview_config.GEMINI_MODEL}")
    
    # Directories
    print("\nüìÅ Directory Structure:")
    print(f"   üìÇ Project Root: {PROJECT_ROOT}")
    print(f"   üîä Audio Files: {AUDIO_DIR}")
    print(f"   üíæ Data Files: {DATA_DIR}")
    print(f"   üóÇÔ∏è  Temp Files: {TEMP_DIR}")
    
    print("=" * 50)

def save_config_to_file(file_path: Optional[str] = None):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON"""
    if file_path is None:
        file_path = DATA_DIR / "config_backup.json"
    
    config_data = {
        "api": {
            "google_credentials_path": api_config.google_credentials_path,
            "gemini_api_key_set": api_config.gemini_api_key is not None
        },
        "audio": audio_config.to_dict(),
        "tts": tts_config.to_dict(),
        "whisper": whisper_config.to_dict(),
        "interview": interview_config.to_dict(),
        "paths": {
            "project_root": str(PROJECT_ROOT),
            "audio_dir": str(AUDIO_DIR),
            "data_dir": str(DATA_DIR),
            "temp_dir": str(TEMP_DIR)
        }
    }
    
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(config_data, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà: {file_path}")
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤: {e}")

def get_system_info() -> Dict:
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö"""
    import platform
    import sys
    
    return {
        "platform": platform.platform(),
        "python_version": sys.version,
        "python_executable": sys.executable,
        "current_directory": os.getcwd()
    }

if __name__ == "__main__":
    print_config_status()
    errors = validate_config()
    if errors:
        print("‚ùå ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:")
        for error in errors:
            print(f"  - {error}")
    else:
        print("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
