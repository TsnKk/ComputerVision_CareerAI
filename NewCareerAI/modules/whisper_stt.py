# stt_whisper_record.py
import sounddevice as sd
import numpy as np
from scipy.io.wavfile import write
import tempfile
import whisper

SAMPLE_RATE = 16000
DURATION_SEC = 5  # ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏î

def record_to_wav(path, seconds=DURATION_SEC, sr=SAMPLE_RATE):
    print(f"üéôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á {seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ... ‡∏û‡∏π‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")
    audio = sd.rec(int(seconds * sr), samplerate=sr, channels=1, dtype='float32')
    sd.wait()
    # ‡πÅ‡∏õ‡∏•‡∏á float32 -> int16 ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    audio_int16 = (audio * 32767).astype(np.int16)
    write(path, sr, audio_int16)
    print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà: {path}")

def transcribe_whisper(wav_path, model_name="large"):
    # model: tiny/base/small/medium/large  (‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà‡πÅ‡∏°‡πà‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤)
    print("üß† ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Whisper:", model_name)
    model = whisper.load_model(model_name)
    # language='th' ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏ä‡∏µ‡πâ‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏ö‡πÑ‡∏ó‡∏¢‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô (‡∏õ‡∏•‡πà‡∏≠‡∏¢ None ‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏î‡∏≤‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô)
    result = model.transcribe(wav_path, language='th')
    return result.get("text", "").strip()

if __name__ == "__main__":
    with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp:
        wav_path = tmp.name
    record_to_wav(wav_path)
    text = transcribe_whisper(wav_path)
    print("üìù ‡∏Ñ‡∏≥‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á:", text)
