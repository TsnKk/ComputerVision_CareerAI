#!/usr/bin/env python3
"""
ЁЯФК TTSmodule.py - Google Cloud Text-to-Speech Engine
=====================================================
р╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣Мр╕лр╕ер╕▒р╕Б:
- Google Cloud TTS integration р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Ар╕Ыр╣Зр╕Щр╣Ар╕кр╕╡р╕вр╕З
- Support р╣Ар╕кр╕╡р╕вр╕Зр╕ар╕▓р╕йр╕▓р╣Др╕Чр╕вр╕Др╕╕р╕Ур╕ар╕▓р╕Юр╕кр╕╣р╕З (Wavenet voices)
- Real-time audio synthesis р╣Бр╕ер╕░ playback
- Audio file management р╣Бр╕ер╕░ caching
- Multiple voice profiles р╣Бр╕ер╕░ speech settings

р╕Др╕зр╕▓р╕бр╕кр╕▓р╕бр╕▓р╕гр╕Ц:
- GoogleTTS class: р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Бр╕▓р╕гр╕кр╕▒р╕Зр╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Ар╕кр╕╡р╕вр╕Зр╕Др╕гр╕Ър╕зр╕Зр╕Ир╕г
- Thai voice support (th-TH-Wavenet-C, Neural2 voices)
- Customizable speech rate, pitch, р╣Бр╕ер╕░ volume
- pygame integration р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Ар╕ер╣Ир╕Щр╣Ар╕кр╕╡р╕вр╕З
- Automatic audio file cleanup
- Threaded audio processing
- Error handling р╣Бр╕ер╕░ fallback mechanisms

р╣Ар╕кр╕╡р╕вр╕Зр╕Чр╕╡р╣Ир╕гр╕нр╕Зр╕гр╕▒р╕Ъ:
- Standard voices: th-TH-Standard-A
- Wavenet voices: th-TH-Wavenet-A/B/C
- Neural2 voices: th-TH-Neural2-C
- Premium quality synthesis

р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ: from modules.TTSmodule import GoogleTTS
=====================================================
"""
from google.cloud import texttospeech
import os
import pygame
import time
import io
from pathlib import Path
from typing import Optional, Dict, List, Union
import threading
import queue

try:
    from .config import tts_config, api_config, AUDIO_DIR, TEMP_DIR
except ImportError:
    from config import tts_config, api_config, AUDIO_DIR, TEMP_DIR

class GoogleTTS:
    """Enhanced Google Cloud Text-to-Speech Class"""
    
    def __init__(self, credentials_path: Optional[str] = None):
        """
        Initialize Google TTS
        
        Args:
            credentials_path: path р╕Вр╕нр╕З Service Account Key
        """
        self.credentials_path = credentials_path or api_config.google_credentials_path
        self.client = None
        self.is_ready = False
        self.pygame_initialized = False
        self.current_audio = None
        self._init_client()
        self._init_pygame()
    
    def _init_client(self):
        """р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ TTS client"""
        if not os.path.exists(self.credentials_path):
            print(f"тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╣Др╕Яр╕ер╣М Google Credentials: {self.credentials_path}")
            return
        
        try:
            os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = self.credentials_path
            self.client = texttospeech.TextToSpeechClient()
            self.is_ready = True
            print("тЬЕ Google Cloud TTS р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ")
        except Exception as e:
            print(f"тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╕гр╣Йр╕▓р╕З TTS client: {e}")
            self.is_ready = False
    
    def _init_pygame(self):
        """р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ pygame mixer"""
        try:
            pygame.mixer.init(frequency=tts_config.SAMPLE_RATE, size=-16, channels=1, buffer=2048)
            self.pygame_initialized = True
        except Exception as e:
            print(f"тЪая╕П pygame mixer р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╣Др╕Фр╣Й: {e}")
            self.pygame_initialized = False


    def get_voice_options(self) -> Dict[str, str]:
        """р╕Фр╕╢р╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕гр╣Ар╕кр╕╡р╕вр╕Зр╕Чр╕╡р╣Ир╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ"""
        return tts_config.VOICE_OPTIONS.copy()
    
    def set_voice(self, voice_type: str = "female"):
        """
        р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Ар╕кр╕╡р╕вр╕Зр╕Чр╕╡р╣Ир╣Гр╕Кр╣Й
        
        Args:
            voice_type: р╕Ыр╕гр╕░р╣Ар╕ар╕Чр╣Ар╕кр╕╡р╕вр╕З (female, male, premium)
        """
        if voice_type in tts_config.VOICE_OPTIONS:
            tts_config.VOICE_NAME = tts_config.VOICE_OPTIONS[voice_type]
            print(f"тЬЕ р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Ар╕кр╕╡р╕вр╕Зр╣Ар╕Ыр╣Зр╕Щ: {tts_config.VOICE_NAME}")
        else:
            print(f"тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╕Ыр╕гр╕░р╣Ар╕ар╕Чр╣Ар╕кр╕╡р╕вр╕З: {voice_type}")
    
    def text_to_speech(self, text: str, filename: Optional[str] = None, voice_type: Optional[str] = None) -> Optional[str]:
        """
        р╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Ар╕Ыр╣Зр╕Щр╣Ар╕кр╕╡р╕вр╕З wav
        
        Args:
            text: р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕З
            filename: р╕Кр╕╖р╣Ир╕нр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕З (optional)
            voice_type: р╕Ыр╕гр╕░р╣Ар╕ар╕Чр╣Ар╕кр╕╡р╕вр╕З (optional)
            
        Returns:
            path р╕Вр╕нр╕Зр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕З р╕лр╕гр╕╖р╕н None р╕лр╕▓р╕Бр╕ер╣Йр╕бр╣Ар╕лр╕ер╕з
        """
        if not self.is_ready:
            print("тЭМ Google TTS р╣Др╕бр╣Ир╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ")
            return None
        
        if not text or not text.strip():
            print("тЭМ р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕зр╣Ир╕▓р╕З")
            return None
        
        # р╕кр╕гр╣Йр╕▓р╕Зр╕Кр╕╖р╣Ир╕нр╣Др╕Яр╕ер╣Мр╕Цр╣Йр╕▓р╣Др╕бр╣Ир╣Др╕Фр╣Йр╕гр╕░р╕Ър╕╕
        if filename is None:
            timestamp = int(time.time())
            filename = TEMP_DIR / f"tts_output_{timestamp}.wav"
        else:
            filename = Path(filename)
        
        # р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Ар╕кр╕╡р╕вр╕Зр╕Цр╣Йр╕▓р╣Др╕Фр╣Йр╕гр╕░р╕Ър╕╕
        current_voice = tts_config.VOICE_NAME
        if voice_type and voice_type in tts_config.VOICE_OPTIONS:
            current_voice = tts_config.VOICE_OPTIONS[voice_type]
        
        try:
            print(f"ЁЯЧгя╕П  р╕Бр╕│р╕ер╕▒р╕Зр╕кр╕гр╣Йр╕▓р╕Зр╣Ар╕кр╕╡р╕вр╕Зр╕Ир╕▓р╕Б: '{text[:50]}{'...' if len(text) > 50 else ''}'")
            
            synthesis_input = texttospeech.SynthesisInput(text=text)
            voice = texttospeech.VoiceSelectionParams(
                language_code=tts_config.LANGUAGE_CODE,
                name=current_voice
            )
            audio_config = texttospeech.AudioConfig(
                audio_encoding=texttospeech.AudioEncoding.LINEAR16,
                sample_rate_hertz=tts_config.SAMPLE_RATE,
                speaking_rate=tts_config.SPEAKING_RATE,
                pitch=tts_config.PITCH,
                volume_gain_db=tts_config.VOLUME_GAIN_DB
            )

            start_time = time.time()
            response = self.client.synthesize_speech(
                input=synthesis_input, 
                voice=voice, 
                audio_config=audio_config
            )
            
            # р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Др╕Яр╕ер╣М wav
            with open(filename, "wb") as f:
                f.write(response.audio_content)
            
            process_time = time.time() - start_time
            print(f"тЬЕ р╕кр╕гр╣Йр╕▓р╕Зр╣Ар╕кр╕╡р╕вр╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И: {filename} ({process_time:.1f}s)")
            return str(filename)
            
        except Exception as e:
            print(f"тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╕гр╣Йр╕▓р╕Зр╣Ар╕кр╕╡р╕вр╕Зр╣Др╕Фр╣Й: {e}")
            return None

    def play_audio(self, filename: str, wait: bool = True) -> bool:
        """
        р╣Ар╕ер╣Ир╕Щр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕Зр╕Фр╣Йр╕зр╕в pygame
        
        Args:
            filename: р╕Кр╕╖р╣Ир╕нр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕Зр╕Чр╕╡р╣Ир╕Ир╕░р╣Ар╕ер╣Ир╕Щ
            wait: р╕гр╕нр╕Ир╕Щр╕Бр╕зр╣Ир╕▓р╣Ар╕ер╣Ир╕Щр╣Ар╕кр╕гр╣Зр╕И
            
        Returns:
            True р╕лр╕▓р╕Бр╣Ар╕ер╣Ир╕Щр╕кр╕│р╣Ар╕гр╣Зр╕И
        """
        if not os.path.exists(filename):
            print(f"тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕З: {filename}")
            return False

        if not self.pygame_initialized:
            print("тЭМ pygame mixer р╣Др╕бр╣Ир╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ")
            return False

        try:
            # р╕лр╕вр╕╕р╕Фр╣Ар╕кр╕╡р╕вр╕Зр╕Бр╣Ир╕нр╕Щр╕лр╕Щр╣Йр╕▓
            pygame.mixer.music.stop()
            
            # р╣Вр╕лр╕ер╕Фр╣Бр╕ер╕░р╣Ар╕ер╣Ир╕Щр╣Др╕Яр╕ер╣М
            pygame.mixer.music.load(filename)
            pygame.mixer.music.play()
            
            print(f"ЁЯФК р╣Ар╕ер╣Ир╕Щр╣Ар╕кр╕╡р╕вр╕З: {Path(filename).name}")

            # р╕гр╕нр╕Ир╕Щр╕Бр╕зр╣Ир╕▓р╣Ар╕кр╕╡р╕вр╕Зр╣Ар╕ер╣Ир╕Щр╣Ар╕кр╕гр╣Зр╕И
            if wait:
                while pygame.mixer.music.get_busy():
                    pygame.time.wait(100)
                print("тЬЕ р╣Ар╕ер╣Ир╕Щр╣Ар╕кр╕╡р╕вр╕Зр╣Ар╕кр╕гр╣Зр╕И")
            
            return True
            
        except Exception as e:
            print(f"тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕ер╣Ир╕Щр╣Ар╕кр╕╡р╕вр╕Зр╣Др╕Фр╣Й: {e}")
            return False
    
    def speak(self, text: str, voice_type: Optional[str] = None, save_file: bool = False) -> bool:
        """
        р╕Юр╕╣р╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б (р╕кр╕гр╣Йр╕▓р╕Зр╣Ар╕кр╕╡р╕вр╕Зр╣Бр╕ер╕░р╣Ар╕ер╣Ир╕Щр╕Чр╕▒р╕Щр╕Чр╕╡)
        
        Args:
            text: р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕╡р╣Ир╕Ир╕░р╕Юр╕╣р╕Ф
            voice_type: р╕Ыр╕гр╕░р╣Ар╕ар╕Чр╣Ар╕кр╕╡р╕вр╕З
            save_file: р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Др╕Яр╕ер╣Мр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
            
        Returns:
            True р╕лр╕▓р╕Бр╕кр╕│р╣Ар╕гр╣Зр╕И
        """
        # р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕З
        if save_file:
            timestamp = int(time.time())
            filename = AUDIO_DIR / f"speech_{timestamp}.wav"
        else:
            filename = TEMP_DIR / f"temp_speech_{int(time.time())}.wav"
        
        audio_file = self.text_to_speech(text, filename, voice_type)
        if audio_file:
            success = self.play_audio(audio_file)
            
            # р╕ер╕Ър╣Др╕Яр╕ер╣М temp р╕лр╕ер╕▒р╕Зр╣Гр╕Кр╣Й
            if not save_file:
                try:
                    os.remove(audio_file)
                except:
                    pass
            
            return success
        return False
    
    def stop_audio(self):
        """р╕лр╕вр╕╕р╕Фр╕Бр╕▓р╕гр╣Ар╕ер╣Ир╕Щр╣Ар╕кр╕╡р╕вр╕З"""
        if self.pygame_initialized:
            pygame.mixer.music.stop()
    
    def is_playing(self) -> bool:
        """р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╣Ар╕кр╕╡р╕вр╕Зр╕Бр╕│р╕ер╕▒р╕Зр╣Ар╕ер╣Ир╕Щр╕нр╕вр╕╣р╣Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣И"""
        return pygame.mixer.music.get_busy() if self.pygame_initialized else False

# р╕кр╕гр╣Йр╕▓р╕З instance р╕лр╕ер╕▒р╕Б
google_tts = GoogleTTS()

# Legacy functions р╕кр╕│р╕лр╕гр╕▒р╕Ъ backward compatibility
def create_tts_client(json_path):
    """Legacy function - р╕кр╕гр╣Йр╕▓р╕З TTS client"""
    try:
        tts = GoogleTTS(json_path)
        return tts.client if tts.is_ready else None
    except Exception as e:
        print(f"тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╕гр╣Йр╕▓р╕З TTS client: {e}")
        return None

def text_to_speech(tts_client, text, filename="output.wav"):
    """Legacy function - р╣Гр╕Кр╣Й GoogleTTS instance"""
    return google_tts.text_to_speech(text, filename) is not None

def play_audio(filename):
    """Legacy function - р╣Гр╕Кр╣Й GoogleTTS instance"""
    return google_tts.play_audio(filename)

def speak(text, voice_type=None):
    """Legacy function - р╕Юр╕╣р╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б"""
    return google_tts.speak(text, voice_type)

def read_questions(tts_client, questions_array, prefix="question"):
    """
    р╕нр╣Ир╕▓р╕Щр╕Др╕│р╕Цр╕▓р╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕Фр╣Йр╕зр╕вр╣Ар╕кр╕╡р╕вр╕З (Enhanced)
    
    Args:
        tts_client: TTS client object (ignored - р╣Гр╕Кр╣Й google_tts)
        questions_array: р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Др╕│р╕Цр╕▓р╕б
        prefix: prefix р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Кр╕╖р╣Ир╕нр╣Др╕Яр╕ер╣М
        
    Returns:
        True р╕лр╕▓р╕Бр╕кр╕│р╣Ар╕гр╣Зр╕И
    """
    if not google_tts.is_ready:
        print("тЭМ Google TTS р╣Др╕бр╣Ир╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ")
        return False
    
    success = True
    
    for i, question in enumerate(questions_array, 1):
        print(f"ЁЯФК р╕Др╕│р╕Цр╕▓р╕бр╕Чр╕╡р╣И {i}: {question}")
        
        # р╕кр╕гр╣Йр╕▓р╕Зр╣Бр╕ер╕░р╣Ар╕ер╣Ир╕Щр╣Ар╕кр╕╡р╕вр╕З
        if not google_tts.speak(question, save_file=True):
            print(f"тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Юр╕╣р╕Фр╕Др╕│р╕Цр╕▓р╕бр╕Чр╕╡р╣И {i}")
            success = False
            continue
            
        print(f"тЬЕ р╣Ар╕ер╣Ир╕Щр╕Др╕│р╕Цр╕▓р╕бр╕Чр╕╡р╣И {i} р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в")
        
        # р╕лр╕Щр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓р╕Бр╣Ир╕нр╕Щр╕Др╕│р╕Цр╕▓р╕бр╕Цр╕▒р╕Фр╣Др╕Ы
        time.sleep(0.5)
    
    return success

def cleanup_pygame():
    """р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Ф pygame mixer"""
    if google_tts.pygame_initialized:
        google_tts.stop_audio()
    try:
        pygame.mixer.quit()
    except:
        pass

if __name__ == "__main__":
    # р╕Чр╕Фр╕кр╕нр╕Ър╣Вр╕бр╕Фр╕╣р╕е
    print("=== р╕Чр╕Фр╕кр╕нр╕Ъ Enhanced TTSmodule ===")
    
    if not google_tts.is_ready:
        print("тЭМ Google TTS р╣Др╕бр╣Ир╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ")
        exit(1)
    
    # р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Юр╕╣р╕Ф
    test_text = "р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Др╕гр╕▒р╕Ъ р╕Щр╕╡р╣Ир╕Др╕╖р╕нр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ Text-to-Speech"
    print(f"р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Юр╕╣р╕Ф: {test_text}")
    
    if google_tts.speak(test_text):
        print("тЬЕ р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕кр╕│р╣Ар╕гр╣Зр╕И")
    else:
        print("тЭМ р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕ер╣Йр╕бр╣Ар╕лр╕ер╕з")
    
    # р╕Чр╕Фр╕кр╕нр╕Ър╣Ар╕кр╕╡р╕вр╕Зр╕Хр╣Ир╕▓р╕Зр╣Ж
    print("\nр╕Чр╕Фр╕кр╕нр╕Ър╣Ар╕кр╕╡р╕вр╕Зр╕Хр╣Ир╕▓р╕Зр╣Ж:")
    voices = google_tts.get_voice_options()
    for voice_type, voice_name in voices.items():
        print(f"р╕Чр╕Фр╕кр╕нр╕Ър╣Ар╕кр╕╡р╕вр╕З {voice_type}: {voice_name}")
        google_tts.speak(f"р╕Чр╕Фр╕кр╕нр╕Ър╣Ар╕кр╕╡р╕вр╕З {voice_type}", voice_type=voice_type)
        time.sleep(1)
