#!/usr/bin/env python3
"""
üíº interview_system.py - Core Interview Processing Engine
==========================================================
‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:
- AI-powered interview question generation ‡∏î‡πâ‡∏ß‡∏¢ Google Gemini
- Integration ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á TTS ‡πÅ‡∏•‡∏∞ STT modules
- Complete interview workflow management
- Job description analysis ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
- Interview session management ‡πÅ‡∏•‡∏∞ tracking

‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:
- Generate contextual interview questions
- Process job descriptions ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏≤‡∏° requirements
- Manage interview flow ‡πÅ‡∏•‡∏∞ user responses
- Integration ‡∏Å‡∏±‡∏ö voice recording ‡πÅ‡∏•‡∏∞ playback systems
- Handle multiple interview rounds ‡πÅ‡∏•‡∏∞ follow-up questions

‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå AI:
- Google Generative AI (Gemini) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
- Context-aware question generation
- Job-specific interview scenarios
- Intelligent follow-up question suggestions

‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: python -m core.interview_system
==========================================================
"""
import os
import sys
import google.generativeai as genai

# ‡πÄ‡∏û‡∏¥‡πà‡∏° modules path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'modules'))

from TTSmodule import create_tts_client, read_questions
from STTmodule import record_voice, transcribe_voice


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏á‡∏≤‡∏ô"""
    
    # ------------------- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TTS -------------------
    json_path = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS", "careerai-469309-9946c52b3f8e.json")
    if not os.path.exists(json_path):
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Google Cloud credentials: {json_path}")
        print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment variable GOOGLE_APPLICATION_CREDENTIALS")
        return False
    
    try:
        tts_client = create_tts_client(json_path)
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á TTS client: {e}")
        return False

    # ------------------- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Gemini -------------------
    api_key = os.environ.get("GEMINI_API_KEY")
    if not api_key:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö GEMINI_API_KEY environment variable")
        print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment variable GEMINI_API_KEY")
        return False
    
    genai.configure(api_key=api_key)

    # ------------------- ‡∏Å‡∏£‡∏≠‡∏Å JD -------------------
    print("=== NewCareerAI - ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏á‡∏≤‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á ===")
    print("‡∏Å‡∏£‡∏≠‡∏Å Job Description (‡∏Å‡∏î Enter ‡∏ß‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏ö):")
    
    lines = []
    while True:
        try:
            line = input()
            if line.strip() == "":
                break
            lines.append(line)
        except KeyboardInterrupt:
            print("\n‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
            return False
        except EOFError:
            break

    jd_text = "\n".join(lines)
    
    if not jd_text.strip():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Job Description")
        return False

    print(f"\n{'='*50}")
    print("üìã Job Description ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:")
    print(f"{'='*50}")
    print(jd_text)
    print(f"{'='*50}")

    # ------------------- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° -------------------
    questions = generate_questions(jd_text)
    if not questions:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ")
        return False

    print(f"\nü§ñ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° {len(questions)} ‡∏Ç‡πâ‡∏≠ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:")
    for i, question in enumerate(questions, 1):
        print(f"  {i}. {question}")

    # ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå
    while True:
        try:
            confirm = input("\nüéØ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ").strip().lower()
            if confirm in ['y', 'yes', '‡πÉ‡∏ä‡πà']:
                break
            elif confirm in ['n', 'no', '‡πÑ‡∏°‡πà']:
                print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå")
                return False
        except KeyboardInterrupt:
            print("\n‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
            return False

    # ------------------- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå -------------------
    print(f"\n{'='*50}")
    print("üé§ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏á‡∏≤‡∏ô")
    print("{'='*50}")
    
    all_answers = []
    
    for i, question in enumerate(questions, 1):
        print(f"\n--- ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà {i}/{len(questions)} ---")
        print(f"‚ùì {question}")
        
        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
            read_questions(tts_client, [question], prefix=f"q{i}")
            
            # ‡∏≠‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
            audio_file = record_voice(f"answer_{i}.wav")
            
            # ‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            answer = transcribe_voice(audio_file)
            all_answers.append(answer)
            
            print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà {i} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà {i}: {e}")
            all_answers.append("(‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ)")

    # ------------------- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ -------------------
    print(f"\n{'='*60}")
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå")
    print(f"{'='*60}")
    
    for i, (question, answer) in enumerate(zip(questions, all_answers), 1):
        print(f"\nüîπ ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà {i}:")
        print(f"   {question}")
        print(f"üí¨ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:")
        print(f"   {answer}")
        print("-" * 50)
    
    print("‚úÖ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå")
    return True


def generate_questions(jd_text):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å JD ‡∏î‡πâ‡∏ß‡∏¢ Gemini AI
    
    Args:
        jd_text (str): Job Description
        
    Returns:
        list: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå
    """
    try:
        model = genai.GenerativeModel("gemini-2.0-flash")
        prompt = f"""
        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏á‡∏≤‡∏ô 5 ‡∏Ç‡πâ‡∏≠ ‡∏à‡∏≤‡∏Å Job Description ‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ
        ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÑ‡∏°‡πà‡∏¢‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ 
        ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏Ç‡∏≠‡πÅ‡∏Ñ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏Ç‡πâ‡∏≠

        Job Description:
        {jd_text}
        """

        response = model.generate_content(prompt)
        text = response.text.strip()

        # ‡πÅ‡∏¢‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á
        questions = []
        for line in text.split("\n"):
            line = line.strip()
            if line and not line.startswith("#") and not line.startswith("**"):
                # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏•‡∏Ç‡∏Ç‡πâ‡∏≠‡∏≠‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                import re
                line = re.sub(r'^\d+[\.\)]\s*', '', line)
                questions.append(line)

        return questions[:5]  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏Ç‡πâ‡∏≠
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {e}")
        return []


if __name__ == "__main__":
    success = main()
    if not success:
        print("\n‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        exit(1)
    else:
        print("\n‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
