#!/usr/bin/env python3
"""
üéØ app_streamlit.py - AI Interview Coach Web Application
=======================================================
‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:
- AI-powered interview question generation (Gemini AI)
- Real-time voice recording and transcription (Whisper STT)
- Text-to-speech response synthesis (Google TTS)
- Interactive job description analysis
- Complete interview simulation workflow
- Audio file management and playback

‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:
- Multi-stage interview question generation
- Voice recording with silence detection
- Real-time audio transcription
- Job requirements analysis
- Interview performance tracking
- Audio file download and management
- Responsive web interface with Streamlit

‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ:
- Streamlit (Web Framework)
- Google Generative AI (Question Generation)
- OpenAI Whisper (Speech-to-Text)
- Google Cloud TTS (Text-to-Speech)
- pygame (Audio Playback)
- sounddevice (Audio Recording)

URL: http://localhost:8501
=======================================================
"""

import streamlit as st
import os
import sys
import time
import threading
from io import BytesIO
from pathlib import Path

# ‡πÇ‡∏´‡∏•‡∏î environment variables ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env
try:
    from dotenv import load_dotenv
    # ‡∏´‡∏≤ path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå .env
    env_path = Path(__file__).parent.parent / '.env'
    if env_path.exists():
        load_dotenv(env_path)
        print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å {env_path}")
    else:
        print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .env ‡∏ó‡∏µ‡πà {env_path}")
except ImportError:
    print("‚ö†Ô∏è  python-dotenv ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ system environment variables")

import google.generativeai as genai

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö modules
import importlib.util
import sys
from pathlib import Path

def import_module_from_file(module_name, file_path):
    try:
        spec = importlib.util.spec_from_file_location(module_name, file_path)
        if spec is None:
            raise ImportError(f"Could not load spec for module {module_name} from {file_path}")
        
        module = importlib.util.module_from_spec(spec)
        sys.modules[module_name] = module
        spec.loader.exec_module(module)
        return module
    except Exception as e:
        st.error(f"Error importing {module_name} from {file_path}: {e}")
        return None

# Import modules
try:
    parent_dir = Path(__file__).parent.parent
    
    config = import_module_from_file("config", str(parent_dir / "modules" / "config.py"))
    TTSmodule = import_module_from_file("TTSmodule", str(parent_dir / "modules" / "TTSmodule.py"))
    STTmodule = import_module_from_file("STTmodule", str(parent_dir / "modules" / "STTmodule.py"))
    
    # Get specific functions and variables
    validate_config = config.validate_config
    print_config_status = config.print_config_status
    GEMINI_API_KEY = config.GEMINI_API_KEY
    GOOGLE_CREDENTIALS_PATH = config.GOOGLE_CREDENTIALS_PATH
    INTERVIEW_CONFIG = config.INTERVIEW_CONFIG
    TTS_CONFIG = config.TTS_CONFIG
    
    # TTS functions
    create_tts_client = TTSmodule.create_tts_client
    text_to_speech = TTSmodule.text_to_speech
    play_audio = TTSmodule.play_audio
    
    # STT functions
    record_voice = STTmodule.record_voice
    transcribe_voice = STTmodule.transcribe_voice
    test_microphone = STTmodule.test_microphone
    
except ImportError as e:
    st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡∏î‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}")
    st.error(f"Module search paths: {sys.path}")
    st.stop()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(
    page_title="AI Coach for Interview",
    page_icon="üé§",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.markdown("""
<style>
.main-header {
    text-align: center;
    color: #1f77b4;
    font-size: 3em;
    font-weight: bold;
    margin-bottom: 0.5em;
}
.sub-header {
    text-align: center;
    color: #666;
    font-size: 1.2em;
    margin-bottom: 2em;
}
.question-box {
    background-color: #f0f8ff;
    padding: 15px;
    border-radius: 10px;
    border-left: 4px solid #1f77b4;
    margin: 10px 0;
}
.answer-box {
    background-color: #f8f8f8;
    padding: 15px;
    border-radius: 10px;
    border-left: 4px solid #28a745;
    margin: 10px 0;
}
.status-success {
    color: #28a745;
    font-weight: bold;
}
.status-error {
    color: #dc3545;
    font-weight: bold;
}
.status-warning {
    color: #ffc107;
    font-weight: bold;
}
</style>
""", unsafe_allow_html=True)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ Gemini
def generate_questions(jd_text):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å JD ‡∏î‡πâ‡∏ß‡∏¢ Gemini AI"""
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel(INTERVIEW_CONFIG["gemini_model"])
        
        prompt = f"""
        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏á‡∏≤‡∏ô {INTERVIEW_CONFIG["max_questions"]} ‡∏Ç‡πâ‡∏≠ ‡∏à‡∏≤‡∏Å Job Description ‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ
        ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÑ‡∏°‡πà‡∏¢‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ 
        ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏Ç‡∏≠‡πÅ‡∏Ñ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏Ç‡πâ‡∏≠

        Job Description:
        {jd_text}
        """
        
        response = model.generate_content(prompt)
        text = response.text.strip()
        
        # ‡πÅ‡∏¢‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        questions = []
        for line in text.split("\n"):
            line = line.strip()
            if line and not line.startswith("#") and not line.startswith("**"):
                # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏•‡∏Ç‡∏Ç‡πâ‡∏≠‡∏≠‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                import re
                line = re.sub(r'^\d+[\.\)]\s*', '', line)
                questions.append(line)
        
        return questions[:INTERVIEW_CONFIG["max_questions"]]
        
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {e}")
        return []

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå
def generate_interview_summary(questions, answers):
    """‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏î‡πâ‡∏ß‡∏¢ Gemini AI"""
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel(INTERVIEW_CONFIG["gemini_model"])
        
        qa_text = ""
        for i, (q, a) in enumerate(zip(questions, answers), 1):
            qa_text += f"\n‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà {i}: {q}\n‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: {a}\n"
        
        prompt = f"""
        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°-‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ:
        {qa_text}
        
        ‡πÉ‡∏´‡πâ‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
        1. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° (1-10)
        2. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö (1-10)
        3. ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö
        4. ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
        5. ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        
        ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
        """
        
        response = model.generate_content(prompt)
        return response.text.strip()
        
    except Exception as e:
        return f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•: {e}"

# Initialize session state
if 'questions' not in st.session_state:
    st.session_state.questions = []
if 'answers' not in st.session_state:
    st.session_state.answers = []
if 'current_question' not in st.session_state:
    st.session_state.current_question = 0
if 'interview_started' not in st.session_state:
    st.session_state.interview_started = False
if 'interview_completed' not in st.session_state:
    st.session_state.interview_completed = False
if 'tts_client' not in st.session_state:
    st.session_state.tts_client = None

# ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å
st.markdown('<div class="main-header">üé§ AI Coach for Interview</div>', unsafe_allow_html=True)
st.markdown('<div class="sub-header">‡∏£‡∏∞‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ AI</div>', unsafe_allow_html=True)

# Sidebar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
with st.sidebar:
    st.header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    config_errors = validate_config()
    if config_errors:
        st.error("‚ùå ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:")
        for error in config_errors:
            st.write(f"- {error}")
        
        st.info("üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
        st.code("""
# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables
set GEMINI_API_KEY=your_api_key
set GOOGLE_APPLICATION_CREDENTIALS=path_to_service_account.json
        """)
    else:
        st.success("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô
    st.subheader("üé§ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô")
    if st.button("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô"):
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö..."):
            if test_microphone():
                st.success("‚úÖ ‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
            else:
                st.error("‚ùå ‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤")

# Main content
col1, col2 = st.columns([2, 1])

with col1:
    # ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏£‡∏≠‡∏Å Job Description
    st.header("üìã 1. ‡∏Å‡∏£‡∏≠‡∏Å Job Description")
    jd_text = st.text_area(
        "‡∏Å‡∏£‡∏≠‡∏Å Job Description ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå:",
        height=200,
        placeholder="‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Job Description ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."
    )
    
    # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
    if st.button("ü§ñ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ AI", type="primary"):
        if not jd_text.strip():
            st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Job Description ‡∏Å‡πà‡∏≠‡∏ô!")
        elif config_errors:
            st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô!")
        else:
            with st.spinner("üß† AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°..."):
                questions = generate_questions(jd_text)
                if questions:
                    st.session_state.questions = questions
                    st.session_state.answers = [""] * len(questions)
                    st.session_state.current_question = 0
                    st.session_state.interview_started = False
                    st.session_state.interview_completed = False
                    st.success(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° {len(questions)} ‡∏Ç‡πâ‡∏≠ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                else:
                    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ
    if st.session_state.questions:
        st.header("‚ùì 2. ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ AI")
        for i, question in enumerate(st.session_state.questions, 1):
            st.markdown(f'<div class="question-box"><strong>‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà {i}:</strong> {question}</div>', 
                       unsafe_allow_html=True)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå
        if not st.session_state.interview_started and not st.session_state.interview_completed:
            if st.button("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå", type="primary"):
                try:
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á TTS client
                    st.session_state.tts_client = create_tts_client(GOOGLE_CREDENTIALS_PATH)
                    st.session_state.interview_started = True
                    st.success("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß!")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡πÑ‡∏î‡πâ: {e}")
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå
        if st.session_state.interview_started and not st.session_state.interview_completed:
            st.header("üé§ 3. ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå")
            
            current_q = st.session_state.current_question
            total_q = len(st.session_state.questions)
            
            st.progress((current_q) / total_q)
            st.write(f"**‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà {current_q + 1} ‡∏à‡∏≤‡∏Å {total_q}**")
            
            current_question = st.session_state.questions[current_q]
            st.markdown(f'<div class="question-box"><strong>‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:</strong> {current_question}</div>', 
                       unsafe_allow_html=True)
            
            col_tts, col_record = st.columns(2)
            
            with col_tts:
                if st.button("üîä ‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"):
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á..."):
                        try:
                            filename = f"question_{current_q + 1}.wav"
                            if text_to_speech(st.session_state.tts_client, current_question, filename):
                                if play_audio(filename):
                                    st.success("‚úÖ ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                                else:
                                    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ")
                            else:
                                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ")
                        except Exception as e:
                            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            
            with col_record:
                if st.button("üé§ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"):
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á... (‡∏û‡∏π‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢)"):
                        try:
                            audio_file = record_voice(f"answer_{current_q + 1}.wav")
                            if audio_file:
                                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°..."):
                                    answer = transcribe_voice(audio_file)
                                    if answer:
                                        st.session_state.answers[current_q] = answer
                                        st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                                        st.rerun()
                                    else:
                                        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ")
                            else:
                                st.error("‚ùå ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                        except Exception as e:
                            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            if st.session_state.answers[current_q]:
                st.markdown(f'<div class="answer-box"><strong>‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:</strong> {st.session_state.answers[current_q]}</div>', 
                           unsafe_allow_html=True)
                
                col_prev, col_next = st.columns(2)
                
                with col_prev:
                    if current_q > 0:
                        if st.button("‚¨ÖÔ∏è ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤"):
                            st.session_state.current_question -= 1
                            st.rerun()
                
                with col_next:
                    if current_q < total_q - 1:
                        if st.button("‚û°Ô∏è ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"):
                            st.session_state.current_question += 1
                            st.rerun()
                    else:
                        if st.button("üèÅ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå", type="primary"):
                            st.session_state.interview_completed = True
                            st.rerun()
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå
        if st.session_state.interview_completed:
            st.header("üìä 4. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°-‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            st.subheader("üí¨ ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
            for i, (q, a) in enumerate(zip(st.session_state.questions, st.session_state.answers), 1):
                with st.expander(f"‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà {i}"):
                    st.markdown(f'<div class="question-box"><strong>‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:</strong> {q}</div>', 
                               unsafe_allow_html=True)
                    st.markdown(f'<div class="answer-box"><strong>‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:</strong> {a}</div>', 
                               unsafe_allow_html=True)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ AI
            st.subheader("ü§ñ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏î‡∏¢ AI")
            if st.button("üìà ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"):
                with st.spinner("üß† AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå..."):
                    summary = generate_interview_summary(st.session_state.questions, st.session_state.answers)
                    st.markdown("### üìã ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
                    st.markdown(summary)
            
            # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            if st.button("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà", type="secondary"):
                # Reset session state
                st.session_state.questions = []
                st.session_state.answers = []
                st.session_state.current_question = 0
                st.session_state.interview_started = False
                st.session_state.interview_completed = False
                st.session_state.tts_client = None
                st.rerun()

with col2:
    st.header("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    
    if st.session_state.questions:
        total_questions = len(st.session_state.questions)
        answered_questions = sum(1 for answer in st.session_state.answers if answer.strip())
        
        # Progress metrics
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", total_questions)
        st.metric("‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß", answered_questions)
        st.metric("‡πÄ‡∏´‡∏•‡∏∑‡∏≠", total_questions - answered_questions)
        
        # Progress bar
        if total_questions > 0:
            progress = answered_questions / total_questions
            st.progress(progress)
            st.write(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {progress*100:.1f}%")
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ
    st.header("üîß ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ")
    st.info(f"""
    **‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:**
    - ü§ñ Google Gemini AI
    - üîä Google Cloud TTS
    - üé§ OpenAI Whisper STT
    - üéÆ Pygame Audio
    - üåê Streamlit Web UI
    
    **‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:**
    - ‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {TTS_CONFIG['voice_name']}
    - ‡∏†‡∏≤‡∏©‡∏≤: {TTS_CONFIG['language_code']}
    - ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {INTERVIEW_CONFIG['max_questions']} ‡∏Ç‡πâ‡∏≠
    """)

# Footer
st.markdown("---")
st.markdown(
    '<div style="text-align: center; color: #666;">'
    'üé§ AI Coach for Interview - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ AI'
    '</div>', 
    unsafe_allow_html=True
)
