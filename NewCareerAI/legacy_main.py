#!/usr/bin/env python3
"""
üìú legacy_main.py - Legacy System Compatibility Layer
=====================================================
‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:
- Backward compatibility ‡∏Å‡∏±‡∏ö old module structure
- Legacy TTS/STT modules integration
- Old AI processor ‡πÅ‡∏•‡∏∞ memory system support
- Migration support ‡∏à‡∏≤‡∏Å old architecture

‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:
- Legacy module loading (tts_module_old, stt_module_old)
- Old AI processor compatibility (Llama3 support)
- Memory system integration (JSON-based storage)
- Gradual migration path ‡∏à‡∏≤‡∏Å old to new system

Legacy Components:
- TextToSpeech (old implementation)
- SpeechToText (old implementation)  
- AIProcessor (Llama3-based)
- Memory (JSON storage system)

Status: DEPRECATED - ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
Recommendation: ‡πÉ‡∏ä‡πâ run_streamlit.py ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö new system
=====================================================
"""

from modules.tts_module_old import TextToSpeech
from modules.stt_module_old import SpeechToText
from modules.ai_module import AIProcessor
from modules.memory import Memory

def main():
    tts = TextToSpeech()
    stt = SpeechToText()
    ai = AIProcessor(model="llama3")
    memory = Memory()

    print("ü§ñ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏π‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á '‡∏´‡∏¢‡∏∏‡∏î' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")

    while True:
        user_text = stt.listen()
        if not user_text:
            continue

        if "‡∏´‡∏¢‡∏∏‡∏î" in user_text:
            tts.speak("‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞")
            break

        response = ai.get_response(user_text)
        tts.speak(response)

        memory.save(user_text, response)

if __name__ == "__main__":
    main()
