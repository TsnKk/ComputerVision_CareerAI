#!/usr/bin/env python3
"""
üîë check_api_keys.py - API Keys Configuration Validator
=======================================================
‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:
- API keys validation ‡πÅ‡∏•‡∏∞ configuration checking
- Environment variables verification
- Google Cloud credentials testing
- API connectivity ‡πÅ‡∏•‡∏∞ authentication testing
- Configuration troubleshooting ‡πÅ‡∏•‡∏∞ setup guidance

‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:
- Gemini API key validation ‡πÅ‡∏•‡∏∞ authentication test
- Google Cloud credentials file verification
- .env file parsing ‡πÅ‡∏•‡∏∞ variable checking
- API quota ‡πÅ‡∏•‡∏∞ rate limit checking
- Connection testing ‡∏Å‡∏±‡∏ö external services
- Detailed error reporting ‡πÅ‡∏•‡∏∞ fix suggestions

‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:
- GEMINI_API_KEY existence ‡πÅ‡∏•‡∏∞ format validation
- GOOGLE_APPLICATION_CREDENTIALS file verification
- API endpoint connectivity testing
- Authentication ‡πÅ‡∏•‡∏∞ authorization verification

‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: python check_api_keys.py
=======================================================
"""
import os
from pathlib import Path

# ‡πÇ‡∏´‡∏•‡∏î environment variables ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env
try:
    from dotenv import load_dotenv
    env_path = Path(__file__).parent / '.env'
    if env_path.exists():
        load_dotenv(env_path)
        print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å {env_path}")
    else:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .env ‡∏ó‡∏µ‡πà {env_path}")
except ImportError:
    print("‚ö†Ô∏è  python-dotenv ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á")
    print("‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: pip install python-dotenv")

print("\n" + "="*50)
print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Keys")
print("="*50)

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Gemini API Key
gemini_key = os.environ.get("GEMINI_API_KEY")
print(f"ü§ñ Gemini API Key: {'‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß' if gemini_key and gemini_key != 'your_actual_gemini_api_key_here' else '‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô'}")
if gemini_key and gemini_key != 'AIzaSyA7VkL0Oz9RwrRyXRtnan4matgkbANJkZI':
    print(f"   Key: {gemini_key[:10]}...{gemini_key[-5:] if len(gemini_key) > 15 else ''}")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google Cloud Credentials
google_creds = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS")
print(f"\nüîë Google Cloud Credentials: {'‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß' if google_creds else '‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤'}")
if google_creds:
    print(f"   Path: {google_creds}")
    if os.path.exists(google_creds):
        print("   ‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà")
    else:
        print("   ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå")

print("\n" + "="*50)
print("üìã ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:")
print("="*50)

if not gemini_key or gemini_key == 'your_actual_gemini_api_key_here':
    print("ü§ñ Gemini API Key:")
    print("   1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://aistudio.google.com/app/apikey")
    print("   2. ‡∏™‡∏£‡πâ‡∏≤‡∏á API Key ‡πÉ‡∏´‡∏°‡πà")
    print("   3. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env")
    print("   4. GEMINI_API_KEY=your_real_api_key_here")

if not google_creds:
    print("\nüîë Google Cloud TTS:")
    print("   1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Google Cloud Console")
    print("   2. ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Text-to-Speech API")
    print("   3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Service Account ‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î JSON key")
    print("   4. ‡∏ß‡∏≤‡∏á JSON file ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ")
    print("   5. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env:")
    print("   6. GOOGLE_APPLICATION_CREDENTIALS=path_to_your_key.json")

print(f"\nüìù ‡πÑ‡∏ü‡∏•‡πå .env ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà: {Path(__file__).parent / '.env'}")
print("üîÑ ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
